/**
* @file     Singleton.h
* @author   Steve Tsai
* @version  1.0
*
* @section  LICENSE
*
* (C) 2010 XPEC Entertainment Inc. All rights reserved.
*
* @section	Description
*
* Singleton: 
*
*/
/* Original version Copyright (C) Scott Bilas, 2000.
* All rights reserved worldwide.
*
* This software is provided "as is" without express or implied
* warranties. You may freely copy and compile this source into
* applications you distribute provided that the copyright text
* below is included in the resulting source code, for example:
* "Portions Copyright (C) Scott Bilas, 2000"
*/

#ifndef HIVE_SINGLETON_H
#define HIVE_SINGLETON_H

#include "Core/Debug.h"

#ifdef __HV_OS_WINDOWS__
// Turn off warnings generated by this singleton implementation
//#   pragma warning (disable : 4311)
//#   pragma warning (disable : 4312)
#   pragma warning (disable : 4661)
#endif

namespace hive
{

/** Template class for creating single-instance global classes.
*/
template <typename T> class Singleton
{
public:
	Singleton ()
	{
		ASSERT (!ms_Singleton);
		ms_Singleton = static_cast<T*>(this);
	}

	~Singleton () { ASSERT (ms_Singleton);  ms_Singleton = 0; }

	static T& GetSingleton () {	ASSERT (ms_Singleton);  return (*ms_Singleton); }

	static T* GetSingletonPtr () { return ms_Singleton; }

protected:
	static T* ms_Singleton;

private:
	/** Explicit private copy constructor. This is a forbidden operation.*/
	Singleton (const Singleton<T> &);

	/** Private operator= . This is a forbidden operation. */
	Singleton& operator = (const Singleton<T> &);
};

} // End of namespace hive

#endif // End of HIVE_SINGLETON_H
